import { prisma } from '../db/prisma';
import { deductUserCredits } from '../db/user';

export interface TextGenerationParams {
  prompt: string;
  maxLength?: number;
  temperature?: number;
  language?: string;
}

/**
 * 生成文本
 * 模拟实际AI API调用
 */
export async function generateText(userId: string, params: TextGenerationParams) {
  // 检查参数有效性
  if (!params.prompt) {
    throw new Error('提示词不能为空');
  }

  // 设置默认值
  const maxLength = params.maxLength || 500;
  const temperature = params.temperature || 0.7;
  const language = params.language || 'zh';

  // 计算所需积分 (长度越长费用越高)
  const baseCredits = 2;
  const lengthFactor = Math.ceil(maxLength / 500);
  const totalCredits = baseCredits * lengthFactor;

  try {
    // 扣除用户积分
    await deductUserCredits(
      userId, 
      totalCredits, 
      'text-generation',
      undefined,
      `生成文本: ${params.prompt.substring(0, 30)}...`
    );

    // 模拟AI文本生成延迟
    await new Promise(resolve => setTimeout(resolve, 1500));

    // 模拟生成的文本
    // 在实际项目中，这里应调用OpenAI或其他文本生成API
    const generatedText = generateMockText(params.prompt, maxLength, language);
    const wordCount = countWords(generatedText, language);

    // 将生成记录保存到数据库
    const textGeneration = await prisma.textGeneration.create({
      data: {
        userId,
        prompt: params.prompt,
        generatedText,
        wordCount,
        parameters: {
          maxLength,
          temperature,
          language
        },
        status: 'completed',
        creditsUsed: totalCredits
      }
    });

    return {
      success: true,
      text: textGeneration,
      creditsUsed: totalCredits
    };
  } catch (error) {
    console.error('文本生成失败:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

/**
 * 重新生成已有提示词的文本
 */
export async function regenerateText(userId: string, textId: string) {
  try {
    // 获取原始生成记录
    const originalText = await prisma.textGeneration.findUnique({
      where: { id: textId }
    });

    if (!originalText) {
      throw new Error('找不到原始文本记录');
    }

    // 检查是否为用户所有
    if (originalText.userId !== userId) {
      throw new Error('无权访问此文本');
    }

    // 解析原始参数
    const parameters = originalText.parameters as any;

    // 调用生成函数
    return await generateText(userId, {
      prompt: originalText.prompt,
      maxLength: parameters?.maxLength,
      temperature: parameters?.temperature,
      language: parameters?.language
    });
  } catch (error) {
    console.error('重新生成文本失败:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '未知错误'
    };
  }
}

/**
 * 获取用户生成的文本列表
 */
export async function getUserGeneratedTexts(userId: string, page = 1, limit = 10) {
  const skip = (page - 1) * limit;
  
  const [texts, total] = await Promise.all([
    prisma.textGeneration.findMany({
      where: { userId },
      orderBy: { createdAt: 'desc' },
      skip,
      take: limit,
    }),
    prisma.textGeneration.count({
      where: { userId }
    })
  ]);
  
  return {
    texts,
    pagination: {
      page,
      pageSize: limit,
      total,
      totalPages: Math.ceil(total / limit)
    }
  };
}

/**
 * 模拟文本生成
 * 在实际项目中将被替换为真实API调用
 */
function generateMockText(prompt: string, maxLength: number, language: string): string {
  const loremIpsumChinese = `这是一个示例文本生成结果。在实际项目中，这里将通过调用专业的AI语言模型（如OpenAI的GPT）来生成高质量的文本内容。
  
根据您的提示词"${prompt}"，AI将会生成一段有创意且相关的内容。生成的内容可以是文章、故事、答案、脚本等多种形式。

文本生成API可以控制多种参数：
- 温度值(temperature)：控制生成文本的随机性和创造性
- 最大长度：控制生成内容的长度上限
- 语言：可指定生成特定语言的内容

生成的结果可以进一步处理，例如保存到数据库、发送给用户、用于内容创作等。AI文本生成在内容创作、问答系统、教育工具等领域有广泛应用。`;

  const loremIpsumEnglish = `This is a sample text generation result. In a real project, this would be generated by calling a professional AI language model (such as OpenAI's GPT) to produce high-quality text content.
  
Based on your prompt "${prompt}", the AI would generate creative and relevant content. The generated content could be articles, stories, answers, scripts, and more.

Text generation APIs can be controlled with various parameters:
- Temperature: Controls the randomness and creativity of the generated text
- Maximum length: Controls the upper limit of the content length
- Language: Can specify the language of the generated content

The generated results can be further processed, such as being saved to a database, sent to users, or used for content creation. AI text generation has wide applications in content creation, Q&A systems, educational tools, and more.`;

  // 根据语言返回不同的示例文本
  const mockText = language === 'zh' ? loremIpsumChinese : loremIpsumEnglish;
  
  // 确保文本长度不超过最大长度
  return mockText.substring(0, maxLength);
}

/**
 * 计算文本中的词数
 */
function countWords(text: string, language: string): number {
  if (language === 'zh') {
    // 中文以字符数计算（简化处理）
    return text.replace(/\s/g, '').length;
  } else {
    // 英文以空格分隔的单词数计算
    return text.split(/\s+/).filter(Boolean).length;
  }
} 